#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use XML::Simple;
use C4::Auth qw/check_api_auth/;

use C4::Members;

use Koha::Patron;
use Koha::Patron::Debarments;
use C4::Members::Messaging;

use Data::Dumper;
my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
  print $query->header(-type => 'text/xml', -status => '403 Forbidden');
  print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my %borrower = ();

my $personalnumber = $query->param('personalnumber');
my $cardnumber = $query->param('cardnumber');
my $messaging_format = $query->param('messaging_format');
my $debarments = $query->param('debarments');

my $origin = $query->param('origin');
my $last_employment_date = $query->param('last_employment_date');

if ($cardnumber) {
  $borrower{'cardnumber'} = $cardnumber;
}
else {
  $borrower{'cardnumber'} = $personalnumber;
}

# Mandatory borrower fields
$borrower{'password'} = $personalnumber;
$borrower{'categorycode'} = $query->param('categorycode');
$borrower{'branchcode'} = $query->param('branchcode');
$borrower{'surname'} = $query->param('surname');
$borrower{'address'} = $query->param('address');
$borrower{'city'} = $query->param('city');
$borrower{'lang'} = $query->param('lang');
$borrower{'dateexpiry'} = $query->param('dateexpiry');

# Optional fields
my $patronuserid = $query->param('patronuserid');
  if ($patronuserid) {
  $borrower{'userid'} = $patronuserid;
}
my $firstname = $query->param('firstname');
if ($firstname) {
  $borrower{'firstname'} = $firstname;
}
my $address2 = $query->param('address2');
if ($address2) {
  $borrower{'address2'} = $address2;
}
my $zipcode = $query->param('zipcode');
if ($zipcode) {
  $borrower{'zipcode'} = $zipcode;
}
my $country = $query->param('country');
if ($country) {
  $borrower{'country'} = $country;
}
my $b_address = $query->param('b_address');
if ($b_address) {
  $borrower{'B_address'} = $b_address;
}
my $b_address2 = $query->param('b_address2');
if ($b_address2) {
  $borrower{'B_address2'} = $b_address2;
}
my $b_zipcode = $query->param('b_zipcode');
if ($b_zipcode) {
  $borrower{'B_zipcode'} = $b_zipcode;
}
my $b_city = $query->param('b_city');
if ($b_city) {
  $borrower{'B_city'} = $b_city;
}
my $b_country = $query->param('b_country');
if ($b_country) {
  $borrower{'B_country'} = $b_country;
}
my $phone = $query->param('phone');
if ($phone) {
  $borrower{'phone'} = $phone;
}
my $mobile = $query->param('mobile');
if ($mobile) {
  $borrower{'mobile'} = $mobile;
}
my $smsalertnumber = $query->param('smsalertnumber');
if ($smsalertnumber) {
  $borrower{'smsalertnumber'} = $smsalertnumber;
}
my $email = $query->param('email');
if ($email) {
  $borrower{'email'} = $email;
}

# Patron attribute fields
my $accept_text = $query->param('accept_text');

my @debarments;
if ($debarments) {
  @debarments = split /,/, $debarments;
}
if ("gna" ~~ @debarments) {
  $borrower{'gonenoaddress'} = 1;
}

$borrower{'sms_provider_id'} = 1;

my $patron = Koha::Patron->new({%borrower})->store;
my $borrowernumber = $patron->borrowernumber;

if ($origin and $origin eq "gukort") {
    my $attributes = [
        {code => "PNR12", attribute => $personalnumber},
        {code => "PNR", attribute => substr($personalnumber, 2)},
        {code => "ACCEPT", attribute => $accept_text},
        {code => "IMPORT", attribute => "gukort"}
        ];
    if(defined($last_employment_date) && $last_employment_date) {
        push($attributes, {code => "ANSTSLUT", attribute => $last_employment_date});
    }
    $patron->extended_attributes($attributes);
} else {
  $patron->extended_attributes([{code => "PNR12", attribute => $personalnumber}, {code => "PNR", attribute => substr($personalnumber, 2)}, {code => "ACCEPT", attribute => $accept_text}]);
}

foreach my $debarment (@debarments) {
  if ($debarment eq 'wr') {
    AddDebarment({borrowernumber => $borrowernumber, type => "MANUAL", comment => "WR, Webbregistrerad"});
  }
  elsif ($debarment eq 'gu') {
    AddDebarment({borrowernumber => $borrowernumber, type => "MANUAL", comment => "GU, GU-spÃ¤rr"});
  }
}


# Set messaging format if parameter is set
if ($messaging_format) {
  my $messaging_options = C4::Members::Messaging::GetMessagingOptions();
  my %whichActionsToTickUsingSimpleOpacMessaging = map { $_ => 1 } (split /\|/, C4::Context->preference('whichActionsToTickUsingSimpleOpacMessaging')); # split the string to array and then convert to hash to use keys for easy checking
  foreach my $messaging_option (@{$messaging_options}) {
    if ($whichActionsToTickUsingSimpleOpacMessaging{$messaging_option->{'message_name'}}) {
      my $message_attribute_id = $messaging_option->{'message_attribute_id'};
      my $message_transport_types = $messaging_format eq 'sms_email' ? ["sms", "email"] : [$messaging_format];
      my $days_in_advance = $message_attribute_id eq 2 ? 2 : undef;
      C4::Members::Messaging::SetMessagingPreference({borrowernumber => $borrowernumber,
                                                      message_attribute_id => $message_attribute_id,
                                                      message_transport_types => $message_transport_types,
                                                      days_in_advance => $days_in_advance});
    }
  }
}

print $query->header(-type => 'text/xml',-charset => 'utf-8', -status => '201');
print XMLout({ borrownumber => $borrowernumber }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
