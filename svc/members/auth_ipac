#!/usr/bin/perl

use strict;
use warnings;

use utf8;
use CGI qw ( -utf8 );
use C4::Auth qw/check_api_auth/;
use C4::Members;
use Koha::Patrons;
use XML::Simple;

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my $cardnumber= $query->url_param('cardnumber');
# In order to prevent the need for updating the IPAC software,
# we keep the name "personalnumber" for the pincode
my $pincode = $query->url_param('personalnumber');
if (!$pincode) {
    $pincode = $query->url_param('pincode');
}
# Now check if pincode is actually a personalnumber.
# In the transition period, we will accept both.
# Which one it is is determined by the length of the string.
# Anything 10 characters or more is considered a personalnumber.
# Anything less is considered a pincode.
my $is_personalnumber = 0;
if (length($pincode) >= 10) {
    $is_personalnumber = 1;
}
# If it is 12, truncate it to 10
if (length($pincode) == 12) {
    $pincode = substr($pincode, 2);
}
my $api_key = $query->url_param('api_key');
my $server_api_key = $ENV{'HTTP_X_KOHA_IPAC_API_KEY'};

# For local debugging only. Should never contain a useful key in production.
# my $server_api_key = "verygood";

my $response_hash = {
    cardnumber => $cardnumber,
    firstname => undef,
    surname => undef,
    print_msg => undef,
    screen_msg => undef
};

# Wrong or missing api key (INVALID_KEY)
if (!$api_key || $api_key ne $server_api_key) {
    $response_hash->{status} = "INVALID_KEY";
    print $query->header(-type => 'text/xml', -status => '403');
    print XMLout($response_hash, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}

# Missing cardnumber or personalnumber (INVALID_CREDENTIALS)
if (!$cardnumber || !$pincode) {
    $response_hash->{status} = "INVALID_CREDENTIALS";
    print $query->header(-type => 'text/xml', -status => '403');
    print XMLout($response_hash, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}

my $patrons = Koha::Patrons->search({cardnumber => $cardnumber});
my $borrower = $patrons->next;

# Borrower not found (INVALID_CREDENTIALS)
if (!$borrower) {
    $response_hash->{status} = "INVALID_CREDENTIALS";
    print $query->header(-type => 'text/xml', -status => '403');
    print XMLout($response_hash, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}

my $borrowernumber = $borrower->unblessed->{'borrowernumber'};
my $dateexpiry = $borrower->unblessed->{'dateexpiry'};
my $lang = $borrower->unblessed->{'lang'};
my $today = `date +"%Y-%m-%d"`;
my $borrower_pin = $borrower->get_extended_attribute("PIN");
my $pnr12obj = $borrower->get_extended_attribute("PNR12");
my $pnr10obj = $borrower->get_extended_attribute("PNR");
my $pnr12 = "";
my $pnr10 = "";
if ($pnr12obj) {
  $pnr12 = $pnr12obj->attribute;
}
if ($pnr10obj) {
  $pnr10 = $pnr10obj->attribute;
}
my $pnr12_valid = 0;
my $pnr10_valid = 0;
if($pnr12 && $pincode eq substr($pnr12, 2)) {
    $pnr12_valid = 1;
} elsif($pnr10 && $pincode eq $pnr10) {
    $pnr10_valid = 1;
}

my $pin_valid = 0;
if($borrower_pin && $pincode eq $borrower_pin->attribute) {
    $pin_valid = 1;
}

# Personalnumber not matching borrower (INVALID_CREDENTIALS)
if (!$pin_valid && !$pnr12_valid && !$pnr10_valid) {
    $response_hash->{status} = "INVALID_CREDENTIALS";
    print $query->header(-type => 'text/xml', -status => '403');
    print XMLout($response_hash, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}

# All is well, we have the correct user

my $screen_msg = "";
# Borrower expired, add screen_msg
if ($dateexpiry lt $today) {
    if ($lang eq "en") {
        $screen_msg = "Patron has expired.";
    } else {
        $screen_msg = "Låntagarens konto är utgånget.";
    }
}

my $print_msg_obj = $borrower->get_extended_attribute("PRINT");
my $print_msg = "";
if ($print_msg_obj) {
  $print_msg = $print_msg_obj->attribute;
}
my $firstname = $borrower->unblessed->{'firstname'};
my $surname = $borrower->unblessed->{'surname'};

my $response = {
    status => "OK",
    cardnumber => $cardnumber,
    firstname => $firstname,
    surname => $surname,
    print_msg => $print_msg,
    screen_msg => $screen_msg
};

print $query->header(-type => 'text/xml; charset: UTF-8', -status => '200');
print XMLout($response, NoAttr => 1, RootName => 'response', XMLDecl => 1);

