#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use C4::Auth qw/check_api_auth/;
use C4::Members;
use C4::Reserves;
use Koha::Patron::Debarments qw(GetDebarments);
use Koha::Patrons;
use Koha::Account::Lines;
use C4::Circulation qw(CanBookBeRenewed);
use XML::Simple;
use JSON qw( to_json );

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
    print $query->header(-type => 'text/xml', -status => '403 Forbidden');
    print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
}
my $userid= $query->url_param('borrower');
my $patrons = Koha::Patrons->search({userid => $userid});
my $patron = $patrons->next;

unless ($patron) {
    $patrons = Koha::Patrons->search({cardnumber => $userid});
    $patron = $patrons->next;
}

#unless ($borrower) {
#  print $query->header(-type => 'text/xml', -status => '404 Not found');
#  print XMLout({ status => 'Borrower not found', error_code => 'borrowerNotFound' }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
#  exit 0;
#}

unless ($patron) {
    print $query->header(-type => 'application/json', -status => '404 Not found');
    print to_json({ status => 'Borrower not found', error_code => 'borrowerNotFound' });
    exit 0;
}


my $borrowernumber = $patron->borrowernumber;
my $account = $patron->account;
my $accountlines = $account->lines->search({ amountoutstanding => { '>' => 0 }});
my $total_outstanding = $accountlines->total_outstanding;
my $outstanding_credits = $account->outstanding_credits;

my $flags = C4::Members::patronflags($patron->unblessed);
my $debarments = GetDebarments({borrowernumber => $borrowernumber});

print $query->header(-type => 'application/json',-charset => 'utf-8');
my $lines = lines($accountlines);

print to_json({
    account_lines => $lines,
    total => $total_outstanding
 });

sub lines {
    my ($accountlines) = @_;

    my @lines = ();

    while(my $accountlines = $accountlines->next()) {
	my $line = $accountlines->unblessed;
	if($line->{itemnumber}) {
	    $line->{item_data} = $accountlines->item->unblessed;
	    $line->{biblio_data} = $accountlines->item->biblio->unblessed;
	}
	push @lines, $line;
    }

    return \@lines;
}
