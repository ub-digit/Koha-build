#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use XML::Simple;
use C4::Auth qw/check_api_auth/;
use Koha::Patrons;
use C4::Members;
use C4::Context;
use JSON qw( to_json );
use Try::Tiny;

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
  print $query->header(-type => 'text/xml', -status => '403 Forbidden');
  print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $cardnumber = $query->param('cardnumber');
my $new_password = $query->param('new_password');
my $patron = Koha::Patrons->find({ cardnumber => $cardnumber });

if (!$patron) {
    print $query->header(-type => 'application/json',-charset => 'utf-8');
    print to_json({ status => "error", code => "patron_not_found" });
    exit 0;
}

if (!$new_password) {
    print $query->header(-type => 'application/json',-charset => 'utf-8');
    print to_json({ status => "error", code => "password_not_set" });
    exit 0;
}

try {
    $patron->set_password({password => $new_password});
} catch {
    print STDERR "$_";
    print $query->header(-type => 'application/json',-charset => 'utf-8');
    print to_json({ status => "error", code => "password_reset_failed" });
    exit 0;
};

print $query->header(-type => 'application/json',-charset => 'utf-8');
print to_json({ status => "ok", code => "password_reset"});

