#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use XML::Simple;
use C4::Auth qw/check_api_auth/;

use C4::Members;
use Koha::Patron::Debarments;

use Data::Dumper;

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
  print $query->header(-type => 'text/xml', -status => '403 Forbidden');
  print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}
my $action = $query->param('action') || 'update';
my $borrowernumber = $query->param('borrowernumber');

if ($action eq 'pnr') {
  my $patrons = Koha::Patrons->search({borrowernumber => $borrowernumber});
  my $borrower = $patrons->next;
  my $personalnumber = $query->param('personalnumber');

  $borrower->extended_attributes->search({code => "PNR12"})->delete;
  $borrower->add_extended_attribute({code => "PNR12", attribute => $personalnumber});
  $borrower->extended_attributes->search({code => "PNR"})->delete;
  $borrower->add_extended_attribute({code => "PNR", attribute => substr($personalnumber, 2)});
}
elsif ($action eq 'cardinvalid') {
  my $debarments = GetDebarments({borrowernumber => $borrowernumber, type => "MANUAL", comment => "GU, GU-spärr"});
  if ((scalar @{$debarments}) == 0) {
    AddDebarment({borrowernumber => $borrowernumber, type => "MANUAL", comment => "GU, GU-spärr"});
  }
}
else { #$action eq 'update'
  my $patrons = Koha::Patrons->search({borrowernumber => $borrowernumber});
  my $borrower = $patrons->next;
  my $existing_cardnumber = $borrower->unblessed->{'cardnumber'};
  my $existing_categorycode = $borrower->unblessed->{'categorycode'};
  my $existing_userid = $borrower->unblessed->{'userid'};

  my $incoming_cardnumber = $query->param('cardnumber');
  my $category = $query->param('category');
  my $categorycode = $query->param('categorycode');
  my $patronuserid = $query->param('patronuserid');
  my $newpnr = $query->param('new_pnr');
  my $firstname = $query->param('firstname');
  my $surname = $query->param('surname');
  my $phone = $query->param('phone');
  my $email = $query->param('email');
  my $msgtype = $query->param('msgtype');
  my $last_employment_date = $query->param('last_employment_date');

  my $existing_pnr12_obj = $borrower->get_extended_attribute("PNR12");
  my $existing_pnr_obj = $borrower->get_extended_attribute("PNR");
  my $existing_pnr12 = "";
  my $existing_pnr = "";
  if ($existing_pnr12_obj) {
    $existing_pnr12 = $existing_pnr12_obj->attribute;
  }
  if ($existing_pnr12_obj) {
    $existing_pnr12 = $existing_pnr12_obj->attribute;
  }


  # If new pnr is present, update in Koha
  if ($newpnr) {
    $borrower->extended_attributes->search({code => "PNR12"})->delete;
    $borrower->add_extended_attribute({code => "PNR12", attribute => $newpnr});
    $borrower->extended_attributes->search({code => "PNR"})->delete;
    $borrower->add_extended_attribute({code => "PNR", attribute => substr($newpnr, 2)});
  }

  my %newdata;
  $newdata{'borrowernumber'} = $borrowernumber;

  if ($firstname) {
    $newdata{'firstname'} = $firstname;
  }

  if ($surname) {
    $newdata{'surname'} = $surname;
  }

  # if ($phone) {
  #   $newdata{'phone'} = $phone;
  # }

  # if ($email) {
  #   $newdata{'email'} = $email;
  # }

  # Ta bort spärrarna GU och WR om vi får ett KORT-meddelande, inte annars
  if (defined($msgtype) && $msgtype eq "card") {
      my $debarments = GetDebarments({borrowernumber => $borrowernumber});
      my @filtered_debarments = grep { $_->{comment} =~ /^GU,|WR,/ } @{$debarments};
      foreach (@filtered_debarments) {
          DelDebarment($_->{borrower_debarment_id});
      }
  }

  # Om kortnumren inte matchar (dvs nytt kort) så sparar vi det gamla numret på ny plats i posten
  # och sätter det nya kortnumret som aktivt. Alla gamla nummer ska sparas.
  if (defined($incoming_cardnumber) && defined($existing_cardnumber) && !($incoming_cardnumber eq $existing_cardnumber)) {
    $borrower->extended_attributes->search({code => "GKNR"})->delete;
    $borrower->add_extended_attribute({code => "GKNR", attribute => $existing_cardnumber});
    $newdata{'cardnumber'} = $incoming_cardnumber;
  }

  if($categorycode) {
      $newdata{'categorycode'} = $categorycode;
  }

  if($patronuserid) {
      $newdata{'userid'} = $patronuserid;
  }

  # Spara att de accepterat biblioteksreglerna.
  # Sparar att datat kommer från GU genom att skriva GU-kort uppdat i posten.
  $borrower->extended_attributes->search({code => "ACCEPT"})->delete;
  $borrower->add_extended_attribute({code => "ACCEPT", attribute => "Biblioteksreglerna accepteras"});
  $borrower->extended_attributes->search({code => "IMPORT"})->delete;
  $borrower->add_extended_attribute({code => "IMPORT", attribute => "gukort updat"});



  if (-e "/usr/local/etc/gucard_replace.sh") {
    system("/usr/local/etc/gucard_replace.sh $existing_cardnumber $incoming_cardnumber > /dev/null 2>&1");
  }

  # Update ANSTSLUT if provided
  if (defined($last_employment_date) && $last_employment_date) {
      $borrower->extended_attributes->search({code => "ANSTSLUT"})->delete;
      $borrower->add_extended_attribute({code => "ANSTSLUT", attribute => $last_employment_date});

  }

  $borrower->set(\%newdata)->store;

  # Renew user if msg is from Ladok registration and user has real cardnumber
  if (defined($msgtype) && $msgtype eq "student_participation" && (($existing_cardnumber ne $existing_pnr) && ($existing_cardnumber ne $existing_pnr12))) {
      $borrower->renew_account;
  }
  
  # Also renew user if msg is from Card and it is the first card for the person
  if (defined($msgtype) && $msgtype eq "card" && (($existing_cardnumber eq $existing_pnr) || ($existing_cardnumber eq $existing_pnr12))) {
      $borrower->renew_account;
  }
}

print $query->header(-type => 'text/xml',-charset => 'utf-8', -status => '201');
print XMLout({status => "ok"}, NoAttr => 1, RootName => 'response', XMLDecl => 1);
