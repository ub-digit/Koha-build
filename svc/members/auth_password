#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use C4::Auth qw/check_api_auth checkpw_internal/;
use C4::Members;
use Koha::Patrons;
use XML::Simple;

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
  print $query->header(-type => 'text/xml', -status => '403 Forbidden');
  print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}
my $cardnumber= $query->url_param('cardnumber');
my $user_password = $query->url_param('user_password');
# Allow for the transitional use of the url parameter 'personalnumber' instead of 'user_password' (it still contains the password)
# Only check this if the 'user_password' parameter is not set
if (!$user_password) {
  $user_password = $query->url_param('personalnumber');
}

unless ($cardnumber) {
  print $query->header(-type => 'text/xml', -status => '404');
  print XMLout({ status => "Cardnumber is required", error_code => "cardnumberIsRequired"  }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

unless ($user_password) {
  print $query->header(-type => 'text/xml', -status => '404');
  print XMLout({ status => "Pin is required", error_code => "pinIsRequired"  }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $patrons = Koha::Patrons->search({cardnumber => $cardnumber});
my $borrower = $patrons->next;

my $match = "false";

unless ($borrower) {
  #print $query->header(-type => 'text/xml', -status => '404');
  # print XMLout({ status => "Borrower not found", error_code => "borrowerNotFound"  }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  print $query->header(-type => 'text/xml',-charset => 'utf-8');
  print XMLout({match => $match}, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $borrower_userid = $borrower->unblessed->{'userid'};

if (checkpw_internal($borrower_userid, $user_password)) {
  $match = "true";
}

print $query->header(-type => 'text/xml',-charset => 'utf-8');
print XMLout({match => $match}, NoAttr => 1, RootName => 'response', XMLDecl => 1);

exit 0;
