#!/usr/bin/perl

use strict;
use warnings;

use CGI qw ( -utf8 );
use XML::Simple;
use C4::Auth qw/check_api_auth/;

use C4::Reserves;
use C4::Items;
use Koha::Patrons;
use Koha::Holds;
use Koha::Items;
use Koha::Biblios;

my $query = new CGI;
binmode STDOUT, ':encoding(UTF-8)';

my ($status, $cookie, $sessionID) = check_api_auth($query, { editcatalogue => 'edit_catalogue'} );
unless ($status eq "ok") {
  print $query->header(-type => 'text/xml', -status => '403 Forbidden');
  print XMLout({ status => $status }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $borrowernumber = $query->param('borrowernumber');
my $biblionumber = $query->param('biblionumber');
my $itemnumber = $query->param('itemnumber');
my $branchcode = $query->param('branchcode');
my $reservenotes = $query->param('reservenotes');

my $borrower = Koha::Patrons->find($borrowernumber);

unless ($borrower) {
  print $query->header(-type => 'text/xml', -status => '404');
  print XMLout({ status => "Borrower not found", error_code => "borrowerNotFound"  }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

unless ($biblionumber or $itemnumber) {
  print $query->header(-type => 'text/xml', -status => '400');
  print XMLout({ status => "At least one of biblionumber, itemnumber should be given", error_code => "itemnumberOrBiblionumberIsMissing" }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

unless ($branchcode) {
  print $query->header(-type => 'text/xml', -status => '400');
  print XMLout({ status => "Branchcode is required", error_code => "branchCodeMissing" }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

if ($itemnumber) {
  my $item = Koha::Items->find($itemnumber);
  my $item_biblionumber = $item->biblio->biblionumber;
  if ($biblionumber and $biblionumber != $item_biblionumber) {
    print $query->header(-type => 'text/xml', -status => '400');
    print XMLout({ status => "Item $itemnumber doesn't belong to biblio $biblionumber", error_code => "itemDoesNotBelongToBiblio" }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
    exit 0;
  }
  $biblionumber ||= $item_biblionumber;
}

my $biblio = Koha::Biblios->find($biblionumber)->unblessed;

my $can_reserve =
  $itemnumber
  ? CanItemBeReserved( $borrowernumber, $itemnumber )
  : CanBookBeReserved( $borrowernumber, $biblionumber );

unless ($can_reserve eq 'OK') {
  print $query->header(-type => 'text/xml', -status => '403');
  print XMLout({ status => "Reserve cannot be placed. Reason: $can_reserve", error_code => "$can_reserve" }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $priority = C4::Reserves::CalculatePriority($biblionumber);
$itemnumber ||= undef;

my $reserve_id = C4::Reserves::AddReserve($branchcode, $borrowernumber, $biblionumber, undef, $priority, undef, undef, $reservenotes, $biblio->{title}, $itemnumber);

unless ($reserve_id) {
  print $query->header(-type => 'text/xml', -status => '500');
  print XMLout({ status => "Unknown error while placing reserve", error_code => "unrecognizedError" }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
  exit 0;
}

my $reserve = Koha::Holds->find($reserve_id)->unblessed;

my $queue_position = '';
my $item;
if ($reserve->{priority} ne '0') {
  if ($itemnumber) {
    $item = C4::Items::GetItem($itemnumber);
    if ($item->{due_date}) {
      $queue_position = $reserve->{priority};
    }
  }
  else {
    $queue_position = $reserve->{priority};
  }
}

print $query->header(-type => 'text/xml',-charset => 'utf-8', -status => '201');
print XMLout({ reserve => $reserve, queue_position => $queue_position }, NoAttr => 1, RootName => 'response', XMLDecl => 1);
exit 0;
